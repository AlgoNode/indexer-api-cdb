// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	LookupApplicationBoxByIDAndName(ctx echo.Context, applicationId uint64, params LookupApplicationBoxByIDAndNameParams) error
	// Get box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	SearchForApplicationBoxes(ctx echo.Context, applicationId uint64, params SearchForApplicationBoxesParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/block-headers)
	SearchForBlockHeaders(ctx echo.Context, params SearchForBlockHeadersParams) error

	// (GET /v2/blocks)
	SearchForBlocks(ctx echo.Context, params SearchForBlocksParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64, params LookupBlockParams) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account-id", runtime.ParamLocationPath, ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationBoxByIDAndName converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationBoxByIDAndName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationBoxByIDAndNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationBoxByIDAndName(ctx, applicationId, params)
	return err
}

// SearchForApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationBoxesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplicationBoxes(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// SearchForBlockHeaders converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForBlockHeaders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForBlockHeadersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "proposers" -------------

	err = runtime.BindQueryParameter("form", false, false, "proposers", ctx.QueryParams(), &params.Proposers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter proposers: %s", err))
	}

	// ------------- Optional query parameter "expired" -------------

	err = runtime.BindQueryParameter("form", false, false, "expired", ctx.QueryParams(), &params.Expired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expired: %s", err))
	}

	// ------------- Optional query parameter "absent" -------------

	err = runtime.BindQueryParameter("form", false, false, "absent", ctx.QueryParams(), &params.Absent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter absent: %s", err))
	}

	// ------------- Optional query parameter "updates" -------------

	err = runtime.BindQueryParameter("form", false, false, "updates", ctx.QueryParams(), &params.Updates)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updates: %s", err))
	}

	// ------------- Optional query parameter "participation" -------------

	err = runtime.BindQueryParameter("form", false, false, "participation", ctx.QueryParams(), &params.Participation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForBlockHeaders(ctx, params)
	return err
}

// SearchForBlocks converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForBlocks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForBlocksParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "proposers" -------------

	err = runtime.BindQueryParameter("form", false, false, "proposers", ctx.QueryParams(), &params.Proposers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter proposers: %s", err))
	}

	// ------------- Optional query parameter "expired" -------------

	err = runtime.BindQueryParameter("form", false, false, "expired", ctx.QueryParams(), &params.Expired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expired: %s", err))
	}

	// ------------- Optional query parameter "absent" -------------

	err = runtime.BindQueryParameter("form", false, false, "absent", ctx.QueryParams(), &params.Absent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter absent: %s", err))
	}

	// ------------- Optional query parameter "updates" -------------

	err = runtime.BindQueryParameter("form", false, false, "updates", ctx.QueryParams(), &params.Updates)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updates: %s", err))
	}

	// ------------- Optional query parameter "participation" -------------

	err = runtime.BindQueryParameter("form", false, false, "participation", ctx.QueryParams(), &params.Participation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForBlocks(ctx, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round-number", runtime.ParamLocationPath, ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupBlockParams
	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber, params)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group-id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group-id: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET(baseURL+"/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET(baseURL+"/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET(baseURL+"/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET(baseURL+"/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET(baseURL+"/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET(baseURL+"/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET(baseURL+"/v2/applications", wrapper.SearchForApplications, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.LookupApplicationBoxByIDAndName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.SearchForApplicationBoxes, m...)
	router.GET(baseURL+"/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET(baseURL+"/v2/assets", wrapper.SearchForAssets, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET(baseURL+"/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET(baseURL+"/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET(baseURL+"/v2/block-headers", wrapper.SearchForBlockHeaders, m...)
	router.GET(baseURL+"/v2/blocks", wrapper.SearchForBlocks, m...)
	router.GET(baseURL+"/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET(baseURL+"/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET(baseURL+"/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
	"jDA/mT2efPz/AQAA///vjMzzdaUBAA==",
>>>>>>> b14b33e (Fix swagger docs for `GET /v2/blocks`)
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
