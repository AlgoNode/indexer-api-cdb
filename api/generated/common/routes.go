// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
