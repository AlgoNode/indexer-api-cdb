// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
