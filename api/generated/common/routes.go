// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
