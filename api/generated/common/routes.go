// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
