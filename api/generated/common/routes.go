// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
