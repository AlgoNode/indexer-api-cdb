// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y5QWKyEdlW/5agU66/Gh/xcAAP//SKFC4MsCAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
