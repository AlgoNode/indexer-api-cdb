// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/y8AAP//tVra42nhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
