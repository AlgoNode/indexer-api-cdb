// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
