// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b/lqBTrr0aH/FwAA//9FSqvOxPYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
