// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
