// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9bZPbNrIo/FdQek5V7BxxxnE2qbNTlTrlteOKa+2sy3ayzz2e3LsQ2ZKQoQAGAEdS",
	"cv3fb6EbIEESlKiZ8dhblU/2iHhpoBuNRr/+McvVplISpDWziz9mFdd8AxY0/sUXBqR1/yvA5FpUVig5",
	"u5g9wd9ZxbUVuai4+5nxPFe1tOaMPVWbDWcG3GAWClYKY5laMl4UGowBczabz2BXlaqA2cWSlwbmM+EG",
	"/q0GvZ/NZ5JvYHYR5p/PTL6GDXeACAsbhM3uK9fEWC3kajaf7TJerpTmssiWSm+4dXDShLMP89Cca833",
	"7m9j96X7wbV1f3voM1EMl+u/sWYuhLXidh2B2vafzzT8VgsNxezC6hpi8LtQf3ATexgHs/5DlnsmZF7W",
	"BTCruTQ8d58M2wq7ZnYtTNhRJiRTEtwe23WnMVsKKAvc8OQG+8nHQTy6sUc++xkyrdx299f4VG0WQkJY",
	"ETQLauiQWcUKWGKjNbfMQRfRkvtsgOt8zZZKH1kmARGvFWS9mV28nxmQBWjEXA7iGv+71AC/Q2a5XoGd",
	"/TJP4W5pQWdWbBJLe+Exp8HUpTUM2+IaV+IaJHO9ztir2li2AMYle/P8Kfv666//ymgb3cGhqUZX1c4e",
	"r6nBQsEthM9TkPrm+VOc/61f4NRWvKpKkSMTSB6fJ+139uLZ2GK6gyQIUkgLK9C08cZA+qw+cV8OTBM6",
	"HpugtuvMkc04YgO/Y7mSS7GqNRSOGmsDdDZNBbIQcsWuYD+Kwmaaj3cCF7BUGiZSKTW+UzKN5/+kdLpQ",
	"u4xgGhANW6gdc98cJ10pXmZcr3CF7AuQuXJ4vLjmZQ1fnLHnSjMhrZl7XINvKKS9+Orx13/xTTTfssXe",
	"wqDd4tu/XDz57jvfrNJCWr4owW/joLmx+mINZal8h+YW7Td0Hy7+///1P2dnZ1+MIQP/Oe2CymutQeb7",
	"bKWBI8dZczncwzeegsxa1WXB1vwayYVv8Or0fZnrS8cDd/OMvRK5Vk/KlTKMe8IrYMnr0rIwMatl6Vi9",
	"G80fXyYMq7S6FgUUc4ez7Vrka5ZzvyHYjm1FWTqqrQ0UYxuSXt0R7tB0cnDdaD9wQZ/vZrTrOrITsEP+",
	"MVz+9zvPJYtCuJ94yVB0Y6bO14wbD9ValQURfXQBsFLlvGQFt5wZqxxjXSrtJR7iunPfv5VXWY4ILNhi",
	"328pi87ox/tMlU/D6pMCapAteFnO/I3lBC0/Zdb8wKvKZLjizFhuIW5TVa6FVBISAshxodbDl+WlMpBZ",
	"dUQACzIVblgkMsU7dpI4xt6tgeHk7gOJokjZ0nHpstwz6xHgCIIF4WvOxJLtVc22eHRKcYX9/WocTW+Y",
	"Qz6irCMpOm42RtyDzUiQ9kKpErj0pF0RixySNn74+M+fAMF9vH9WWtVVUqJ6qdRVXXVfIIs9ww7sxTOH",
	"ZGEIuWzj5YQFN/DtXzK8Oh1TQopy4uqW68LM/XeWr7nmOdIVIvk/5+wc237XjPTTm5dhmBG8NpCfKkIR",
	"EGPyQ/t1DbwAnSlZ7oe78wN+ZO4jW5Z8dcb+uQbP1Z0Q6MiU6HLONNhaS8duSpVfsUKBYVJZJ0BaLmT/",
	"7WZGFhzDc4SG/fMxczxoXJAtA2+m5k5mxUNSNEQ9ZwWUgAe1ZaT4q7Fa7fEAO3Y2Z6pyjEvVdsjgZeGH",
	"pc99fo/Mb/SlGq/kyKJLsREJpcUrvhObesNkvVk4jC0bodcqjxpkWBpYjnxn0bm9Kr4Cw8DJxIKe2TiP",
	"Q7LDoQaer8dvVoLpyGW64btMq1oWE16TlikdS+umglwsBRSsGWUMlnaaY/AIeRo87Rs3AicMMgpOM8sR",
	"cCTsEmh1V4z7ggiKsHrGfvLyD3616gpkIybRhQ+s0nAtVG2aTmNis5v6sJgslYWs0rAUuyGQb/12uFuO",
	"2nghLbA5zwKgYJ4PuOGIqY7CFE34sVhfpVWlDCRewX9DFha+3+Gl10x5H7eehivYJwWjPoETuhp13Np9",
	"ob6HsdTMcIRpTTxnJAfH5+vg2Zp0rrBRRmwx8Y5xXz3TTKs+O/0nvC3juUnxlt1KCUpjBEob24reTB9P",
	"32LEKqMRB1xArN45eXkpSpR5fnWHP2C2Nu7e7eI2SNdGrCS3tYaLS/ml+4tl7K3lsuC6cL9s6KdXdWnF",
	"W7FyP5X000u1EvlbsRrblABrUimK3Tb0jxsvrQS1u2a5qSnC59QMFXcNr2Cvwc3B8yX+s1siIfGl/p3e",
	"R3jl22o5BsAhsbXd0LyjGF/snfA6si845CF+j7zDVEoaQKp9QoLSG/+b+8mxdG89iWSd81+NQm1BO7bj",
	"eKCtoJG8yOX++x8alrOL2f933tpozqmbOfcTzhpthB27qukAc+tZGLEuz9RI2NlUtSXRJcUdmuP8voGt",
	"P2eLFrX4FXJLG9QF4wFsKrt/6AD2sJu72y3TuSQm7lv/cviI+0jCS4ZCyHDkn4zXcFR8JSQufM627hmx",
	"4VeOK3Cp7Bo0c7gAY4MYQ+yPJJvGguJlIf8oPpulTkwCp+bWSG2x9tKJ829RnL8LFPf0IyfgOgXSn5hv",
	"MD/Y2LskgdUd4f6gaeny8j2vKlHsLi9/6bwohSxgl8bHR0V2qVZZwS2/GY2unrmuCQL9nGmoa7a7KwK6",
	"W+I5AQv3e6Pe1Xbd8WG7EY/9k7MmTsXtmaoxYP/GSy7zO7lOF36oyRh+JaRAIH4gVd6faA5obrbyLlDs",
	"d/dODjKZliYf4T+RmzrDjcHu1qi9K5ROQuQ9vwhxyrvYpE9F+H9S/N1SPCqGb4TLQ6jCUafMfCdXJA40",
	"mYw8bH+Skb8VafduS0Zqd/dEpHapWf+mdkxIUuV6MfZvagef6/t14WCbTpxq98xPqfS/99OSFj6Fjv7m",
	"vfkMWqBkvLNuyd9rrfQdYDc89HvwzGcbMIavIG0ojNcYGk5ZVAAYEQJuCWhu+AF4addP1/ARuG409pHj",
	"+q7VrN/Bxn5UxhkZAY6tP1rVkZd7d9gTeV00jfncd+/zYRedLZ/OEDs47bPD6Tg2pyH5QzAmxdaihCOy",
	"jzSJriOHKe6dscnWeykv5TNYComuKReX0vGh8wU3IjfntQHttQVnK8UumB/yGbf8Us7m/QtqzPCKjqMe",
	"mqpelCJnV7BPYYE8WhMjKMvLyNsmcm71Pg6tOWlIZzRq5shB1TbzvvSZBvQgG85mGg8LHJm8bA/NOmd+",
	"bHIE8b76fvw07Q88NYeRQgedWIXsepk6RP6orHcn4FtGhMRqA4b9a8Or90LaX1h2WT969DWwJ1XVmjH+",
	"1brEOkDRkHmnNhFcLOIwg53VPEMHqDShmHqDN21ZMmzbdbfVaqX5xjtQ9R15D+w0TT7tpoqWhSt6S70+",
	"zKM3YQ9V+DtbQzl0/z0VMZEC5cZ4OaKEORCQ8i6Km+IrLqQJvN2IlXRU7X3QF8Byd5dDccZeLBnypnkn",
	"7MoHkHm+1zAAYchtPHb1zLlEd/KqQH8fIRmX+76F3YC1wa3hDVzB/l3kLnOi24X3HeRHLraidsM1l1uL",
	"Vbblhm0UulzkIG259+6ICRJMA1MLackvquOgPQAkcpd2pyJSBo85nEeel7yq2KpUC887Glq8aIgx9Bln",
	"E68dAOYOWETyVdt1YD+2ejpmY472p6/OjXerQ3ZwTTcmrqXQBp1agXtWz+PDcAMa8x63Q1D+uQaUopRG",
	"z9MuHZlweFPk3TicoWcwSCuuIYNSrMQiFZ2Z886NGfzzvftyM4JhYsmENczrwx0QQjLN5Qqc9EIefbyk",
	"WLIkNCU3NlsD13YBfMTJExHThrd0lu36s61jWUqWQsLcbQ7sHB0LtxMaJGyhcKsR2rdh7g6vR656BMi7",
	"IhY3hCd0xz3EPUvPtREy81uX8FoO8kuzu0FADT6s8VFCuOj7BjDsSm0NetsXTPmIoUE8TO2eoGnQOiEO",
	"E11rXnf6uEGOyW5JaU0t+0LZQH5KgkyNM7fm4Uy1oVgTt65w2YXR6d2DUJ8x9Dv0m7QoMfykifckfHMN",
	"cQQIxT+OgWPGxOMweXft8aFbcxMOHkZ3hXtiksQ6wsxa8nV8NKLf+N0h3LwlXPOxnR53dMRAhr7vIooQ",
	"w+is4AFN8evBwTF4NQZXRvev43d1WTpuU8srqbbuOXOKs+J8Rkd+CPC1QjGFPgfC8CB+YSLUODj+sVwi",
	"/8iYkIU7RPjo4DYE26lcUExTy5MdL1+5H8/cAI663ACTR0iRrR8SJWylShqY/aji8ydXpwApQeC9wsPY",
	"eMFEf0P6FY5iOkrsFPwhZJri8nDK3TuhIxUhYBghuQCQFEPChJwzx8queelYmVUkmjaDpJ9aDzqvJC+4",
	"m4djT7C0hohWhJLLSWsiWecmq4nF/wB0+m1yAOKF2mUYcTyEFQOHqyprmJiS5Z7i8/rvdBzBrUflSCHB",
	"5fwK9hQaiMGqeEpQI+v5xwJK5SR9NaCwFlFHgL8t4HcIzWEBP0XNBkmPJO+W7A4EmB6dekS+HiO7B0hD",
	"twCgr39vPOW9hueoUqYrygwv/vY2nLeRCcSR02xk7CgOCb5LRUksjuzvUI3XOCi/7ks/SWVdpxWjJguv",
	"h4reQqnbz7GjXEkD0tQYw21VrsqzgZbOQAn4jMg6All2BYmIxLehcaS3Yw/E0r3PH0avAw0rYSx0oqub",
	"YJI2FmiPEckVtxa0G/5/P/jvi/dPsv/h2e+Psr/+5/kvf/zlw8MvBz8+/vDdd/+3+9PXH757+N//MRu5",
	"lsGJ22qZXtMbpZqLDxszbNxZ2r1Dfa0sZPjuy655mTLvPcdHYVLS6gYPUwoAMaJzx4muYJ8VoqzTtPhj",
	"wwVNvUBOLSQD7jght/kapenOjK7Ngdnw/TOyqpf8zhY1gZy1Q3134H8Tuu7x00OHOEFMKbQPkTO6jwfY",
	"GkpGz6Ak4+V4rh46aIVreHbIcDA4GEUY+9BrMYJi/OahkZJr6Tr3jq8CLekotwgbZQswgxVN1QFtm/ju",
	"WATd8kbJ9dF1PfHqYn2PHyWtYvEfb7G84fBTl5dMqjbN2wERdorKkgSgAU3hWfGDHaGnyC4yvFzdM8L4",
	"BwcdkEi4pCwasi9k9uisiYGfhosgK/iQfFU3N+FhWfbuaA4Sjy1ae4r82FKrDR62oawZKyBH9BIdqmuv",
	"lt6sPtnbkF4cv8QHylE7MPDy77D/2bVFrLreQcKcekpaNU145YUXx61QczubV4ry/YhHKZ8iUMbIHtOC",
	"kW2iY6E+8QSUamVSAZurNr45poIFuEcx7CCvbav27CnXG/3//cqAfUNCOhY18jmg1HSHJQXcHz/WEYy9",
	"btjjx0QYryqtrnmZeVtukptji2DtvWdZK32g3n3/5OVrDzEaEIHrrHlrpBeCjdo3xme7FidqqCPGYFRE",
	"BQVA/0r3xlxhOgbgLeY/6T1dnfDkqYg2pjXiR8fUG4SXQdQ+0bzrnQxoiYecDVqFD/kadP0L+DUXZVDZ",
	"BxjTVwUtqXXlOPm2iAe4tZ9C5FeS3Sn/Hxze9Ek4wmjiGQ6kN9lQkh3DlE9j0iLLPUbRKIBkueF7Ry2k",
	"lh1yHFlvULOTmVKkzGJddSXDViPvWTeUu1oPDeK+mwk6sR5Y0eDJ7QtBG2O7tVDe2a2W4rcamChAWvdJ",
	"45nrHUN36kLavxu/XhIWbEoPeI/vF5zwlJeLTzJ1q8U1o9zk/eLeJwlrImHNr6fB3W3eMa0KdyjHIRCH",
	"HzGxE9EA3GeNajJQUWNh4LJjRj7BuzCecSA2jHgGRudOCm/nuAFWjicBDg8ln4QszR9OegfFOc1u9fox",
	"2VKr31NetNvhtNGE1Cs96OTXS++cjLxiRC9J5w1Q1GSDuy1Izav31kD1b8fGttFmhm6RM3rIxuTu2AbT",
	"dUkdYeR43jAMhOvLy1/oYRnsvFzSAXuKGaY7T570MY0dlM9p/PaYepiH+gi+XfD8KrGY1iuwY4m2ioVO",
	"TX6/LnbOWORg2LT1qfIq0Bthu+y+fVHdVLKlaSfLtK0Ii9QUC68+XWVpVGKYWm65tCHhoWdgvjcWRfBe",
	"xluljcUcvMlVFpCLDS9HzHstgyzESlCGwtpAlF/P92eVEtIS0RTCVCXfk7tluyMvluzRPGJeHgmFuBZG",
	"LErAFl9RiwU3KIu0GqbQxa0KpF0bbP54QvN1LQsNhV371I9GsebRgQqaNlko2C2AZI+w3Vd/ZQ/Qy8WI",
	"a3joNs/LlLOLr/6KFkb641Gal2O25FHeGlh6mmrRp4e6ukvRD5bmtVQd4KQzQ12mnBhs6Rn+8ROz4ZKv",
	"UqnbDsBCfVq7fm8fZEGJflFkYsKm5wXLHdfJ1tysU0nVc7XZCLvx/g5GbRy1tNnNaK4wCtn0iV034ISP",
	"6IFcsbRy7X41PukM8j/yDXQ3cc64YaZ2oLZKK8/czpjP61dQ4thWm4hbQonoySONdL7LKE18bZfZf0Wp",
	"c8/GoMwW3/4lkbiRUu/6nLo013TA7327NRjQ19MOWhCTfB/2QCqZbRx7KB56Tt09c6PuTGm23Hc4OTzk",
	"VBnJjZIdpioecdlb0Zc8MOAtKa5Zxklkd/LK7p0Aa52ghp/evPTywEZp6OpWFyGmqCNZaLBawDWGXqRx",
	"48a8JQp0OWnzbwP9p7WhB+EwEqDCiU2J6hSZP5K7Nlr22KNXqasrgErI1Tn5b6MwTaP2xeiFkvWIxrJS",
	"TnYSvGTYiFV873a5EUEP+IYvAUyWq7KEPPlG7UVfueas4oKOTZwuNTg+HphrBRKMMCPX+eXl+9XavVDc",
	"Z3cTR1oWCgggnztz/0c0AD4SYb8C6eB+8ewY1IOBu24VFOp0VIfT8Qf7yffBXMqUazrDecd32bVz8L4O",
	"uakJTtf+/rd2PAE0pc+mrw3/7lPXVOV/GCijozEWjmprXobYTqTuJWhfdqkDDupgsDAOADNCXh31zT+a",
	"3+ONbzvuVH95+V7LwmHuqQ+fIx+prh2bkLnlaJcAWbTQ52suRnxSDUB6QvfBzfhWaSvIaQfgEzvwWc3z",
	"q6QC8p37YhonPvK0j9z5zORALrRGvHZ93oXZUsZYsQFj+aZK7p01bufoLsB7xW1f08UxTAO5koVxFJQD",
	"g0qZ9bGMAiY91U7iZCEpeocz50pTKmGUXa3qRXtP3ZKDce1dGDOtlB0D1MHZSUiglGW8tmt3hYU4AsDC",
	"Fv2VUPQbvltlFPTEXjkpIyRh5mW5nzNhv6BxtPfs5GwD+qoEZjUA266VAVYCv4a2FBKO9oVh73aiMFjo",
	"qISdyNVK82otcqZ0AZpqZLnm+JamTn6+R2fMR/X6OIh3O4nLaypxxOukZYbolcaiFa94TiJc/2esUGOg",
	"vAZzxt5tFQFh2twGxkm/3YIqtaWYwUIsl4DcA5eDT3Hs136IYMKiThhq0Azr13T/PGBAYZlZ88fffDtG",
	"aI+/+TZFa29/ePL4m2+dJMwl4/VOlILrfdzMtZqzRS1K67Omc3YNuVU61jgIaSzwYkBbpI3ys6Ass6xl",
	"7t3Qmi5x6a23Pzz55qvH/+fxN9969VU0S4iC9gF2IK+FVtJ9CgrDhkL8lM1ssBPGfgJpye5khu/l1K3u",
	"UJMjWnbyKTViPvCia87tsbAN6afCwS+hWIGetxex46ttzhH3uFM6koCXQCFi7l4U0mpV1DlQpou3Hb4R",
	"gSUGIDW1PiJ3GzzrofZZC2fQpDYyC2Mv8AX8iB5kUnVXiGcMrkFTTE870AO6HCK4jOUa/ZTQbckvFYqH",
	"6au9rlaaFzDNCwEvq5+oR5O4IYxwrU4b4GfXvv/A6rwBOpJ1WoCNAjkAKzS1d27qzjnAJUbfb2/GIiif",
	"Uz0xDSWFumEZHyowNXidLQEyJwgmKd69mjABV55D5Sg9rp8L4O4aOul4lrGuZxDamiBoCsJLa7AQpizn",
	"ZV6X9JQ4IEJuc16iJagl7BKWVjnai+sDtqYA4eZaoIc41b+h+bS7w6IemDbqGvTetyDNSyg3486N7rnu",
	"DEXlrIRrKJOAA9coO/ygtmzD5b7BhZuiBWMeRcY1kJMQjB4ihO2fvFIoAp/OmSfIw0A6VIxsbhHjuQIt",
	"VCFyJuSv4A96/HRAiqG6VUpaIWssWaehhZuueoYhuv0w3CEF6KRLsYOLW3CAtVEcErYdbBfRQ6EbDGEs",
	"vwICOwQTe+lmKk41GFHUaciWmuddyE4jRn9433AL57pBrbkjuuwxr+aQHzp0fVrukU0PW8NdGuVTHb48",
	"hVnxJuKLeR6ecBb3GahCyxGNgbIKL+0od0sz9jVo03VDjswEsDsytmvRGZ/ycoXUBqfPkgV/NDM6357Y",
	"cUtzQX6mwHvs79MqpHZwJGlZA4DZCpuvs1TgiAeAWjgY3vSf8MMpSbrAUwjLJeR2CgwYtUPl20ahoM8O",
	"imfAC4wYb6OuKN6qD8qDHxVzQ5tI5JFG4EOilXhwlIcnZKdvKOQY8f+sJtK+D7hHT4gJxyDIOB73yS3z",
	"bTzxvGii3jnbg8FdabzLozOCmUnSJt4waQEl3x+aEht0J21k3mDcpjsHE3i4C4W82UeDkMPU/pwdmtw1",
	"6S+4OZ7DUxHXTRpgUiWc3EIuzSaEymclTPhsJm1Yjpj5Bsk4FNlu6n+2hT3v2ah4N2kx0nGNIfhksA34",
	"JewD/tHfiE9sXQnFwf09SSv5JU0oUVLZJMkUzfcoJJriDHD9Ifke97WvJ1JTz5IVKOoz2LfUPn1/zcuR",
	"QMs3UGkwqCfg7N33T156p5ixcMs8Hel4efmeW0dT2I+NJpv6MJ+NZIa4vHy/QI5JeR8abAyti0kfaseI",
	"hOvuPg9638wlbyyJarShwRd/CNDfQwAYq7jwjl5trOlwZ33Q8TC6e0oQWYvg/iJ8VO/oEfqBm/Vznlul",
	"98MMru5pPZJa5/LyvcP3KVv81bdpdu9ASE/yLsrf01WRNf5/6HsX5CG1HOTxYZjIZ8295iz86V76UdKe",
	"5vtsPhvoAVpcxHmIE35Ga/xMuQ1ZKMs3xPRouuZikTVhI6nynPOZT7c8Xok0oXEXJtuIlUaRJz3qeJro",
	"6IpK3DAkaieKuXuxZlwW7xFpZ+E9iFvwohvBz5wi6BeygB3o1jLzql1dIr1+RlWsTdYqU9O8iYj9fuUD",
	"isN3UxgLxQFtzfLEo0geP6UT0yaNX95sfJmhmCyzLYjVOr2xr280tBOjjyPt+v6RlmJwr1Dr/8QdSKTI",
	"EUa7bNnwwWToEcdG3wA7Yr+3a1r+5xKSqsG9YaoRcG1xIiH818hm98tEJRi1EZuqJOdPz0oGua9OSjTR",
	"Bph8/Hiluw76+OjhG3Bjj8S7j9q4KSzHU1IdjtX4h3yqNlUJ48JzxSWJz0sh/bt9u+Y2rvwfbEAqz2vd",
	"GnH70Rg/81JQyWaDWQylUhWmLayskO4/mMBB1Zb+D1y7/5BTUfd/RFWRnOSGmiFeMPlVGChEcs7mM+o8",
	"C5SdlKKSjkmDTemmswr4RCdstKVJgAIDEtps0uc8t2T/9M6aEuxW6avEM2ZhUJ/U8auKa/gOuSnXtq44",
	"PVF440HhU7g2WeEa0DxkpjbkXdPxnzjKK2FXOVo7HcBCb64nQthsnpLXoL3tQ/mckmTloDS1g4RNzIN3",
	"yppSrPqGCYAmuaEMX2iJbW6FRFINpn2bUK2l43dy5Cs0dNnM9b6y6hzbYJNzY3WdW0Nem+2cA6p0G03O",
	"S8eLIfZFCicJKCPInmlVpuEa+JiaHl214LcaHJLRVOcas2aAFGKnMu3+HtPY6a1FQGJXGAqaIge7ch+S",
	"ZXK35xtevadZfmEZe0MQN6UU0CNvY1bV6Z5bNFQKdMNLm42+crx8yd7y0sZihAPI+3k0HjLjiWtJgk2O",
	"nn+KJ4eD6eYk6BYMxSFxf3sDcX+Ud+C8zUVBElj3SF2DpljoyeTwc+jxYT6713W8aU7skCtE65u2inhT",
	"ItaQVrGEr+E4tamSuSxYNL9heDYSvoJ4dEFavb9JmiGxykypTljeW7F66zoc2dLQbLCnpdqCzty8B1Bc",
	"BlMjxdtQy04q6aaWC41HnhJQMLcYc7ONoIFP2gnf5fhetGP3nFJ4mSuZdWa/X65D/DJD6sqaLAdHdo9v",
	"urtXhbf1qVwLmcReyFU686Nj9Few/zx0CQmP4wE+0cQ7rszBh8aPjUNDZGTaeiMyGQm7gs6RKhLuuYaS",
	"pi+Xc+Bc2e65av2LNiLXiqMzRptyGgYSrH/soS9jsxuHHEzSymVKzE2d3+0raJxyh6V2NrwK7y18hzsh",
	"+OxjKq3Ym8YdeehRmitpucCCOknhnpxxoayQUbW68bPPinx/jm7mnq/J4f3JN0hAkeEq9t92/x9umdUA",
	"9+/hegX7rBRLsGLEIF0u3Ur+DnsWmp3dmUwxliOpY/BDzUNJMQFt3iemNH1Z4Zc4vRQjPopB0ib8ZVgB",
	"FvTGkeJabdmmztcou/MVhARLaLBBz/LeRJ3RQ0aKbnowHx9oKp7TQBT2X3K9As18JH5TlyQYgDZc4Dlp",
	"vYH78bnoKMZTxrhjaZ9eUSqAiHeh6TTKAZXILhXAuIL9OVkG8fcbMJLxVFIjgGFeqY8I0q3SU8U5zY7Q",
	"61XHqErFvjrJ3xrw79C46uDzKoQTjavDbG1Tl4frwONQGxiuc3o0Try3iSduu7apngHDzR0x6B+z44+U",
	"bPHmXuTj2JchfOxfX/2LaViCRr3Vl1/i8F9+Off+Cv963P3sqO3LL9NOTcmTc3d+A00lADeGny5JHd0C",
	"sD0bKl3yhsJpyXHNXWhKostmWfZCnmTBMNkAiiccI0CgVBUkW2OxsvgGxQRwGlZ1ySnUR0gJutNpSqYf",
	"ev7bnfSqLvzz3U6m2sbiJLaOtiNVIDSqwnyzyrm9cnKUZynHjEY3HbHNidSOSNlVbjPic0rp0owYIkxv",
	"M+Y7P8aREo6Xl+/NSqJaLijjRMgSgAIwYbhLTU3mgFDmMWQqasLZ4Lealz5cT2Jw3DtM25NfgaQKjo7L",
	"+eq7DKSptVcJOlhxPAeKH0bFl7lpm9y0luN4QbDLy/c6J+2v92j3ySAw8xR1dWJG4ZCjDhdVce3dE3Ms",
	"GZ2TbLmbyzcM8cXoK3rs6YVkrDfjNvxetug4sgQzLob+I8O39UvaUujpXIRtUsnezUz57x+8ePaQiX4x",
	"9DjrY/TQOr7suITKNIgow8gAln7uyVOgWAKMhfP0AgvZEkZUwQfLd7ix8FVIdTywVd8F+yiUE7Mq/MAN",
	"VunwzdtI+s8xlUIHSPbiWVLO6GTHPbkkxHy20qpOR26vNJqG+r6g7hGAAhY94Mm57PzxN9+yQqzA2DP2",
	"T0yuR5fvsC5aF5tMtPXWOqU8GQLWJGglMcgHI0Zzrj1CB8HBwgcl4jD3j+Gb5Cefz1AuyewuFeD+YiCz",
	"sMpHcGJu0YjfdNze7yKsXUirOTHfTC2XyXy7/8DfW7cIHXiyhiHWJ3DlK9hruKns8nfs3JQYHec8JXIe",
	"rLVzM8ZTAh+JHCh3iePz9eOsPUFn7KXrzUAulXav6k2Nlj7YYWI+b3CLpVRMX2fb8tCYuU7+Dlqh0kAy",
	"5Q3b/TPWbDZGWfIc5Xnjo4gdDE1i3UYx+eAtSjNzAvIhvUmHR43V0goSf9w2/hztYuUuHgf0P9eiTFBB",
	"pdx3E8MxZ1Ixhc5BcUtKa9BmXSSYfVh4h5Du95jH6cSLtKnfUQLGQ76Mamu0Gol8zWVbsf14SYYhTU6r",
	"yTwoSpQ45umKEW4BK1rA6k7g/LSOelKNhIe6DyiGaKAMiY327J6TAfH9BqS9Ied7Tb3JNwHr2erDLwA9",
	"8gIIvY/VAb6CfWZVemwgwxJJ5s1TC/WkxG2jNc5H3j1NjF2ogd/KrnSCnIiwrNGgG5kug57UP+kaf7Ir",
	"2LfeLnGtQHo23eCVRddiWgv+TmygfZeQIJcSgcSkK5Gel+l3LeVEIpb9xYHlNMMcpgozQhXU9zBNTLbz",
	"RmQbGXoHeY5ucAoiNyTMxXEgzGNfQTewDx0TG0VdJ8kF6gzO2LMmSQz6IVKsfZs5hvRZfW9FyojSZEkW",
	"Oui9uA76anRoRGc3PDUJRuAbkGzk2gylJN+E50tsMKYICs12S9Btu5QyJrRc6t/bhkM9UGhWVehZMKLR",
	"8q2MrdA4NIbp1imz4vtZEAZn85lblvvHge3+Xerf3T9VVWKV02o59MlMH2BPExnOkwhxn3VfrR1BsjmJ",
	"LWkd0YAerKPnA3eXVIO3uVVPVU/GCnRKR97+8JSX5bud9H6Aw7C3A56XvKLQt5fe47Lh0I6Ne/fdoLXy",
	"3CG2xPA8dyJe0aZ8iOD8wrB+3RRKBDGsnHLAG/Moh+6LADFtcr0aXTcqrIZiqMgZ16ua0g/dw/qOrGDk",
	"ZcMrUfiEjMNCdl5kI7ZQayiY0j6Vl1j6PG1jlRyOl6mi3au8zCjyVjRss1CMUPrcPX6g8snWlczyxrPc",
	"3ZPuhWkVuySP7MvZGXtBOWM08IIYrBYWUnWUOuvH5LdbwLLOgaKzBrtRFbwzd4o6NbcMUrYG9J9IlEj7",
	"t6zHhRgz9QjGxrgSSVVdJH0CDD0dFhPDYgFS2X8jPE2qzHV5+R4qPFjdshdxHEVVNcW6SnD7/luNAXCO",
	"YeOwIzpapUGs5EgtdiSQJQ8XgemjK3kddLmUTzcYI94MbolGHL8ZE0XLCw1GKQR4kWEp+wMu3wn22uzF",
	"SHF4YnBNsknTxt4Yv8qoBsa0JQY28zpaIRJ2EGXvcn03KKl26zpqvQE6XONY306AUaLyWnwX9oc+JplF",
	"Vs6DkhmVbCjdwok/acjC/Rk4liyomkPdxitdyifsd9DKP1abodyBaHXjPg24z496lujUFFYxg279KU8s",
	"WEOLPyAdjhaAurx8v+MDKQNhuoV8cbMaXkdx/HyklEiM42Aq8zVEblkJiGY8sLFtzOXQIsYL3Neo/kLs",
	"40VMpikoQLvta6ogsfDtSBmTg9hcHsTmgfE7GZi24XVI6YfT7NO/JinX1TbsOPVIxXWOxyi2FaWGU085",
	"/I3zwCTSCC/k2xJHmPUAeYyb0jknL9EnZER3rzLjBa8A3xnzLCSdyNtAuQzcLNjmgvU4pjR3M9G9tuHV",
	"nVaPO8o8IojHfQ5g1OOgzWvmL+ZEKnMaofVtcLJmsEYmRMYT1x5GT6MQv/bTWfG4KoRZq7osqDDEBnOx",
	"tW/MBHZ8AahGLmwLcpEbB3pdxEHWJpoh3mzGXriRebnlexMUtS1ljQ8XdpXKRySUhHGyRtIup/dG5+Qm",
	"DrmoBEjb+NzEeHFEPq7eTA/s1aSO61AWOXHdaC284z1vK6l1TW/B8uarRfHohp77beZlV11AAwdVtGvz",
	"NIwdVtSgNLrQjqcUSdXTa7b0CNPzttGD3M7rFU9lctSLuBxNM87epJLdAOARo4x0jRzSXnF91bkE/WH1",
	"A8gVpRPojNqRMaIkAAZKSkXai0Eei5AxUHpTxut6UYoczQjo9N0YFrzHf8HecFmoDXsekvk8+PnN84dM",
	"g6lLG4gsZDZ2xOch+bTlBEYXXumlX/nbKFqmWb6Q3qKyEsbqhOLy3leFOR+PORy5RktjW68jMlhTusdB",
	"QLjwXDB9DeGEV7DPClHWo4TsWl0V3YSbpl5gWTghKSvvgtscvVkGIJgDUx/xcHBtSloqujncdqXTDgwu",
	"15+YzixV7/x8bgR05CkRzKuHuae33JzKPn034p9+ppvJhyQetmESUSJgh89QEKV38d9KyoqmoDgtJ30Y",
	"X5WwFba6LqVt0U/ZeIZGhoSjLqfd8dJup0HOwkmw8JkYSlxuQrz9/d3SSkbYv/DFSstI+FnWsjC9LWzL",
	"4R+wvx6UfbzoE9ocNOWOCQVTJYFO0GwXEjRc+qCTNl7aGJWL1giPtSapquQ/ZLn3Sen6FT3aray0uhZF",
	"qhB9qVYiN6SCOdVi/DL0/TCfberSihuO8yr0JRN2+joUK38VyoLrgkHx+JtvvvprNxXCZ8SuhpuUdO/x",
	"y/JaRm5F3pVjm9VNYGIBlWcrNWRZo8Y2vWptD41xLZW4dbqNDAEZD30PilbvILLYMx6RunJie2lF+9Pc",
	"/bbmZt2yzqhsMZaR5szzq77XH8YXRYa+ew4/94Sd3coxo3c8xhhHe0g+h7MRs0eih6ks8VXESQYr3Pgl",
	"kt7V0UsIusS9rkpwsl3LA0fT6ATU0JUf5nwrhlX+4/HSu44NsHSgcpII5WV1wmQrcaGCoIXqBt7Bg/15",
	"G8OVyou31mAcRGnvm7VOZho5lH+zzXyYyKt+Em7f9va0l5kE921Uwq2uPlECm0M08HlkcUg7Yh0Wmcdy",
	"MbApgXlNMqp+Eqpx6TnKCnuI9EfzrXbfz9Mzmnhw+l5uY+5ppgoOau+i0NE4Qxd7QeTfejWiHCspX41P",
	"uUfGX18AoLtftw/J/4ARAktF2Q2k5bltU4vPnviRZr7I72xtbWUuzs+32+1ZmOYsV5vzFUY5ZVbV+fo8",
	"DIRpJDup03wXX/3KXbvl3orcsCevX6CQLGwJGDCBqIsS6l7MHp89otSLIHklZhezr88enX1FR2SNdHFO",
	"aY7df1cU5uCoBiXhFwWGoF9BnCgZa2djKmTs/vjRo7AN/pkYmSfPfzXE0KZZTONpcJO7G/EA7WkPo4L8",
	"iQrK8kqqrWTfa62IQZp6s+F6jxHQttbSsMePHjGx9OmdKfEHd2La+xlF5M5+cf3Orx+fR35ivV/O/wgu",
	"GqL4cOTzOa8qk0UG5KPtgxX+YKtEFN/0PpNm6BWgDG3T80W/nv/RNVF/mNjsfIGVIqY2hanTn3s//9C2",
	"v3j8+/yPoFr+cODTuU9Lcaj7yL5RtZn+3+d/kDs1qS6iqdODdK6BP+zOQ4saXu2O/ezi/R89vgM7vqlK",
	"QJYz+/BLQ+4Nx/Jk/2He/FIqdVVX8S8GuM7X2H2XKS1WQjpy3vLVCnTWYzj/LwAA///LTDQ3/+UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
