// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"sSCa/mjpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
