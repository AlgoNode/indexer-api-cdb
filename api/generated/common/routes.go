// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
