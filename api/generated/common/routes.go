// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FwAA//9YFQ2yJuQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
