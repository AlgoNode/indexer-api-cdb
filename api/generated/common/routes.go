// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
